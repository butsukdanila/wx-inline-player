#!/bin/bash
d_script="$(dirname $0)"
d_build="$(realpath "$d_script/__build")"
d_graph="$(realpath "$d_script/__graph")"

function clean() {
  echo ">> cleaning >>"
  rm -rf "$d_build"
  rm -rf "$d_graph"
  echo "<<"
}

profiles=("base" "h264" "h265")
backends=("wasm" "asm")

function __validate_args() {
  local IFS="|"
  local pval=$1
  local preg="\<${1}\>"
  if [[ ! ${profiles[@]} =~ $preg ]]; then
    echo "invalid codec profile: $pval. available: ${profiles[*]}"
    return 1;
  fi
  local bval=$2
  local breg="\<${2}\>"
  if [[ ! ${backends[@]} =~ $breg ]]; then
    echo "invalid codec backend: $bval. available: ${backends[*]}"
    return 1;
  fi
  return 0;
}

function __build_variant() {
  if !(__validate_args "${@}"); then
    return 1;
  fi
  local pval=$1
  local bval=$2
  emcmake cmake .. -DCODEC_PROFILE="$pval" -DCODEC_BACKEND="$bval"
  emmake make -j 4
  mv "bin/player-codec.js" "bin/$pval.$bval.js"
}

function __graph_variant() {
  if !(__validate_args "${@}"); then
    return 1;
  fi
  local pval=$1
  local bval=$2
  local name=$1.$2.dot
  emcmake cmake .. -DCODEC_PROFILE="$pval" -DCODEC_BACKEND="$bval" --graphviz="$name"
  dot -Tpng -O "$name"
}

function __meta_call() {
  local call_type=$1
  local call_tdir=$2
  local call_func=$3
  echo ">> $call_type >>"
  rm -rf "$call_tdir"
  mkdir "$call_tdir"
  cd "$call_tdir"
  if [ $# -eq 3 ]; then
    for pval in "${profiles[@]}"; do
      for bval in "${backends[@]}"; do
        eval "$call_func" "$pval" "$bval"
      done
    done
  elif [ $# -eq 5 ]; then
    local pval=$4
    local bval=$5
    eval "$call_func" "$pval" "$bval"
  else
    help
    return 1
  fi
  echo "<<"
}

function help() {
printf "this is help\n"
}

case $1 in
  build) { __meta_call "building" "$d_build" "__build_variant" "${@:2}"; };;
  graph) { __meta_call "graphing" "$d_graph" "__graph_variant" "${@:2}"; };;
  clean) { clean; };;
  *)     { help;	};;
esac